package rotation.pivotsearch;

import java.util.Scanner;

public class SearchPivotRotated {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            int n = sc.nextInt();
            int[] arr = new int[n];
            for (int j = 0; j < n; j++) {
                arr[j] = sc.nextInt();

            }
            int key = sc.nextInt();
            System.out.println(findPivotSearch(arr, key, n));
        }
        sc.close();
    }

    private static int findPivotSearch(int[] arr, int key, int n) {
        int pivot = findPivot(arr, 0, n - 1);
        System.out.println("pivot :"+pivot);
        if (pivot == -1) {
            return binarySearch(arr, 0, n - 1, key);
        } else if (arr[pivot] == key) {
            return pivot;
        } else if (arr[0] <= key) {
            return binarySearch(arr, 0, pivot - 1, key);
        } else {
            return binarySearch(arr, pivot + 1, n - 1, key);
        }
    }

    private static int binarySearch(int[] arr, int i, int n, int key) {
        int mid = (i + n) / 2;
        if (n < i) {
            return -1;
        }

        if (arr[mid] == key) {
            return mid;
        } else if (key < arr[mid]) {
            return binarySearch(arr, i, mid - 1, key);
        } else {
            return binarySearch(arr, mid + 1, n, key);
        }
    }

    private static int findPivot(int[] arr, int i, int n) {
        int mid = (i + n) / 2;

        if (i > n) {
            return -1;
        } else if (i == n) {
            return i;
        }

        if (mid<n && arr[mid] > arr[mid + 1]) {
            return mid;
        } else if (mid>i && arr[mid - 1] > arr[mid]) {
            return mid - 1;
        } else if (arr[mid] < arr[i]) {
            return findPivot(arr, i, mid - 1);
        } else {
            return findPivot(arr, mid + 1, n);
        }
    }

}
